#!/usr/bin/env python
PACKAGE = "emergency_stop"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("negative_acceleration", double_t, 0, "avg. deceleration of that specific car", 0.5, 0.3, 1.0)

gen.add("target_quotient", double_t, 0, "A double parameter", 1.0, 0.9, 1.6)

# 0.0175 ~ 1 degree; 0.0873 ~ 5 degree
gen.add("steering_angle_tolerance", double_t, 0,
        "deviation from central wheel position (in radii) up to which the car is assumed to be driving straight ahead",
        0.0175, 0., 0.0873)

gen.add("safety_margin", double_t, 0, "the width of the potentially traveled path is extended by this value", 0.02,
        0.0, 0.2)

gen.add("maximum_lidar_radius", double_t, 0,
        "objects up to this distance from the lidar will be considered for obstacle detection", 3.0, 1.0, 6.0)

# objects within this extension are not considered for obstacle detection!
gen.add("dim_extension", double_t, 0, "virtual extension of the cars dimensions in x- and y-direction", 0.0, -0.05, 0.05)

gen.add("stop_distance", double_t, 0, "car stops at that distance, independent of any other circumstances", 0.05, 0.0,
        2.0)

gen.add("max_startup_damp_range", double_t, 0,
        "distance to an obstacle, from which on the wanted speed gets damped linear on max speed", 2.5, 0.0, 3.0)

gen.add("forward_minimum_distance", double_t, 0, "distance from lidar (center) to leading edge", 0.13, 0.0, 0.5)

gen.add("reverse_minimum_distance", double_t, 0, "distance from lidar (center) to trailing edge", 0.29, 0.0, 0.5)

gen.add("lidar_rear_axle_distance", double_t, 0,
        "distance from lidar (center) to rear axle (lidar is assumed in front of the rear axle)", 0.2, 0.0, 0.4)

gen.add("car_length", double_t, 0, "total length of the car, including bumper etc", 0.43, 0.4, 0.5)

gen.add("car_width", double_t, 0, "total width of the car", 0.19, 0.18, 0.20)

gen.add("wheelbase", double_t, 0, "distance from front to rear axle", 0.26, 0.1, 0.5)

gen.add("track", double_t, 0, "distance of the centers of the rear tires", 0.165, 0.15, 0.19)
# --------------------------------------------------------
# Possibly calculate in the code at the start of the node:
# 1.5707 ~ 90 degree
gen.add("half_angle_front_init", double_t, 0,
        "angle, that has to be considered in both directions, when driving forward", 0.63, 0., 1.5707)

gen.add("half_angle_back_init", double_t, 0,
        "angle, that has to be considered in both directions, when driving backward", 0.33, 0., 1.5707)

gen.add("half_angle_front_init_proj", double_t, 0,
        "angle, that has to be considered in both directions from projected lidar on rear axle, when driving forward",
        0.28, 0., 1.5707)

gen.add("half_angle_back_init_proj", double_t, 0,
        "angle, that has to be considered in both directions from projected lidar on rear axle, when driving backward",
        0.76, 0., 1.5707)
# --------------------------------------------------------

#gen.add("lidar_orientation_correction", double_t, 0, "difference from orientation to the front (counterclockwise) in radii", 0.0, 0.0, 6.3)

#gen.add("currentSteeringAngle", double_t, 0, "A double parameter", 0.0, -0.785398, 0.785398)

exit(gen.generate(PACKAGE, "emergency_stop", "EmergencyStop"))
