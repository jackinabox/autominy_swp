#!/usr/bin/env python
PACKAGE = "emergency_stop"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# avg. deceleration of that specific car
gen.add("negative_acceleration", double_t, 0, "A double parameter", 0.5, 0.3, 1.0)
# value ...
gen.add("target_quotient", double_t, 0, "A double parameter", 1.0, 1.0, 1.5)
# precision of angle values -> 0.0175 ~ 1 degree; 0.0873 ~ 5 degree
gen.add("steering_angle_tolerance", double_t, 0, "An double parameter", 0.0175, 0., 0.0873)
# the width of the potentially traveled path is extended by this value
gen.add("safety_margin", double_t, 0, "An double parameter", 0.0, 0.0, 0.2)
# objects up to this distance from the lidar will be considered for obstacle detection
gen.add("maximum_lidar_radius", double_t, 0, "A double parameter", 3.5, 1.0, 6.0)
# virtual extension of the cars dimensions in each direction,
# objects within this extension are not considered for obstacle detection!
gen.add("dim_extension", double_t, 0, "A double parameter", 0.0, -0.01, 0.05)
# car stops at that distance, independent of any other circumstances
gen.add("stop_distance", double_t, 0, "A double parameter", 0.05, 0.0, 2.0)
# distance to an obstacle, from which on the wanted speed gets damped linear on max speed
gen.add("max_startup_damp_range", double_t, 0, "A double parameter", 3.0, 0.0, 3.0)
# distance from lidar (center) to leading edge
gen.add("forward_minimum_distance", double_t, 0, "A double parameter", 0.13, 0.0, 0.5)
# distance from lidar (center) to trailing edge
gen.add("reverse_minimum_distance", double_t, 0, "A double parameter", 0.29, 0.0, 0.5)
# distance from lidar (center) to rear axle (lidar is assumed in front of the rear axle)
gen.add("lidar_rear_axle_distance", double_t, 0, "A double parameter", 0.2, 0.0, 0.4)
# total length of the car, including bumper etc
gen.add("car_length", double_t, 0, "A double parameter", 0.43, 0.4, 0.5)
# total width of the car
gen.add("car_width", double_t, 0, "A double parameter", 0.19, 0.18, 0.20)
# distance from front to rear axle
gen.add("wheelbase", double_t, 0, "A double parameter", 0.26, 0.1, 0.5)
# distance of the centers of the rear tires
gen.add("track", double_t, 0, "A double parameter", 0.165, 0.15, 0.19)
# --------------------------------------------------------
# Possibly calculate in the code at the start of the node:
# angle, that has to be considered in both directions, when driving forward; 1.5707 ~ 90 degree
gen.add("half_angle_front_init", double_t, 0, "An double parameter", 0.63, 0., 1.5707)
# angle, that has to be considered in both directions, when driving backward; 1.5707 ~ 90 degree
gen.add("half_angle_back_init", double_t, 0, "A double parameter", 0.33, 0., 1.5707)
# angle, that has to be considered in both directions from projected lidar on rear axle, when driving forward
gen.add("half_angle_front_init_proj", double_t, 0, "An double parameter", 0.28, 0., 1.5707)
# angle, that has to be considered in both directions from projected lidar on rear axle, when driving backward
gen.add("half_angle_back_init_proj", double_t, 0, "A double parameter", 0.76, 0., 1.5707)
# --------------------------------------------------------




#gen.add("currentSteeringAngle", double_t, 0, "A double parameter", 0.0, -0.785398, 0.785398)


exit(gen.generate(PACKAGE, "emergency_stop", "EmergencyStop"))
